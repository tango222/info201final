arrange(-femaleMedian)%>%
slice(1)%>%
print()
#################
#### PART 3 #####
#################
#this part uses both sets of data to look at intresting problems
colnames(anyDrinking)[3:length(colnames(anyDrinking))] <- paste('any', colnames(anyDrinking)[3:length(colnames(anyDrinking))], sep = '_')
colnames(bingDrinking)[3:length(colnames(bingDrinking))] <- paste('binge', colnames(bingDrinking)[3:length(colnames(bingDrinking))], sep = '_')
all.drinking <-left_join(anyDrinking, bingDrinking)
all.drinking.rate <- mutate(all.drinking, rate = any_both_sexes_2012 - binge_both_sexes_2012)
summarize(
filter(
filter(all.drinking.rate, state != location),
state != 'National'),
mean = mean(rate))%>%
print()
filter(all.drinking.rate, state != 'National') %>%
group_by(state) %>%
summarize(meana = mean(any_both_sexes_2012), meanb = mean(binge_both_sexes_2012), meanr = mean(rate)) %>%
arrange(meanr) %>%
slice(1) %>%
print()
#this function takes in a name and year and
ExportStateYear <- function(name, year){
all.drinking.filtered <- filter(all.drinking, state == !!name)
neededColumns <- grepl(toString(year), colnames(all.drinking))
neededColumns[1:2] <- TRUE
important <- select(all.drinking.filtered, which(neededColumns))
placement <- paste('data/', toString(name), year, '.csv', sep = '')
write.csv(important, placement)
}
ExportStateYear('Washington', 2011)
ExportStateYear('Alabama', 2012)
#this fuction outputs the county that has the highest percent of binge drinking also the percent
#inputs: name: string the name of the state; year: year that they want to check
MostBingeDrinkingCounty <- function(name, year){
all.drinking.filter <- filter(
filter(all.drinking, state == !!name),
state != location)
neededColumns <- grepl(paste('binge_both_sexes', year, sep = "_"), colnames(all.drinking))
neededColumns[1:2] <- TRUE
important <- select(all.drinking.filter, which(neededColumns))
important <- important[order(-important[ ,3]), ] %>%
slice(1)
return(important)
}
print(MostBingeDrinkingCounty('Washington', 2006))
print(MostBingeDrinkingCounty('New York', 2007))
anyDrinking.info.ordered <- arrange(anyDrinking.info, difference_2012)
genderClosest <- paste("Drinking is most similar between genders in ", anyDrinking.info.ordered[1,'location'], ', ', anyDrinking.info.ordered[1,'state'], sep = '')
print(genderClosest)
#################
#### PART 1 #####
#################
library("dplyr")
#this part out puts information on amounts of drinking within the states and the counties.
anyDrinking <- read.csv('data/any_drinking.csv', stringsAsFactors = FALSE)
anyDrinking.info <- select(anyDrinking, state, location, both_sexes_2012, females_2012, males_2012)
anyDrinking.info <- mutate(anyDrinking.info, difference_2012 = males_2012 - females_2012)
#number of locations where females drink more then males in 2012
femalesDrinkMore <- summarise(filter(anyDrinking.info, difference_2012 < 0), count = n())
paste('Females drank more than males in', femalesDrinkMore, 'locations') %>%
print()
#closest location for drinking between genders in 2012
anyDrinking.info.ordered <- arrange(anyDrinking.info, difference_2012)
genderClosest <- paste("Drinking is most similar between genders in ", anyDrinking.info.ordered[1,'location'], ', ', anyDrinking.info.ordered[1,'state'], sep = '')
print(genderClosest)
anyDrinking.info.noNat <- filter(anyDrinking.info, state != 'National')
anyDrinking.info.summary <- group_by(anyDrinking.info.noNat, state) %>%
summarise(mean = mean(both_sexes_2012))
mostDrinking <- filter(anyDrinking.info.summary, mean == max(mean)) %>%
print()
leastDrinking <- filter(anyDrinking.info.summary, mean == min(mean)) %>%
print()
#outputs the range of the drinking rate
diffDrinking <- select(mostDrinking, mean) - select(leastDrinking, mean)
paste("Range in drinking rate was ", round(diffDrinking, digits = 1), "%", sep = '') %>%
print()
#################
#### PART 2 #####
#################
#this part out puts information on amounts of binge drinking within the states and the counties.
bingDrinking <- read.csv('data/binge_drinking.csv', stringsAsFactors = FALSE)
bingDrinking.county <- filter(
filter(bingDrinking, state != location),
state != 'National')
bingDrinking.county.diff <- mutate(bingDrinking.county,
both_diff = both_sexes_2012 - both_sexes_2002,
females_diff = females_2012 - females_2002,
males_diff = males_2012 - males_2002)
#mean of both sexes drinking percent in 2012
summaries <- summarize(bingDrinking.county,
mean = mean(both_sexes_2012)) %>%
print()
bingDrinking.state.extremes <- group_by(bingDrinking.county, state) %>%
summarise(max = max(both_sexes_2012),
min = min(both_sexes_2012))
write.csv(bingDrinking.state.extremes, 'data/state_binge_drinking.csv')
#increase in male drinking from 2002 to 2012
drinkPercentMale <- summarize(filter(bingDrinking.county.diff, males_diff > 0),
count = n()) / summarize(bingDrinking.county.diff, count = n()) * 100
drinkExpressionMale <- paste("Male binging increased in ", round(select(drinkPercentMale, count), digits = 0), "% of counties", sep = "")
print(drinkExpressionMale)
#increase in female drinking from 2002 to 2012
drinkPercentFemale <- summarize(filter(bingDrinking.county.diff, females_diff > 0),
count = n()) / summarize(bingDrinking.county.diff, count = n()) * 100
drinkExpressionFemale <- paste("Female binging increased in ", round(select(drinkPercentFemale, count), digits = 0), "% of counties", sep = "")
print(drinkExpressionFemale)
#number of places that had an increase of female drinking and a decrease of male drinking
drinkFemaleMaleDiff <- summarize(filter(filter(bingDrinking.county.diff, females_diff > 0),males_diff < 0),
count = n()) / summarize(bingDrinking.county.diff, count = n()) * 100
drinkExpressionDiff <- paste("Female binging increased & male binging decreased in ", round(select(drinkFemaleMaleDiff, count), digits = 0), "% of counties", sep = "")
print(drinkExpressionDiff)
#highest median between all the states
highestMedian <- group_by(bingDrinking.county.diff, state) %>%
summarize(median = median(males_diff)) %>%
arrange(-median)%>%
slice(1)%>%
print()
#highest median for places where female drinking increased and male drinking decreased
drinkFemaleMore <- filter(filter(bingDrinking.county.diff, females_diff > 0),males_diff < 0)
highestMedianF <- group_by(drinkFemaleMore, state) %>%
summarize(femaleMedian = median(females_diff), bothMedian = median(both_diff)) %>%
arrange(-femaleMedian)%>%
slice(1)%>%
print()
#################
#### PART 3 #####
#################
#this part uses both sets of data to look at intresting problems
colnames(anyDrinking)[3:length(colnames(anyDrinking))] <- paste('any', colnames(anyDrinking)[3:length(colnames(anyDrinking))], sep = '_')
colnames(bingDrinking)[3:length(colnames(bingDrinking))] <- paste('binge', colnames(bingDrinking)[3:length(colnames(bingDrinking))], sep = '_')
all.drinking <-left_join(anyDrinking, bingDrinking)
all.drinking.rate <- mutate(all.drinking, rate = any_both_sexes_2012 - binge_both_sexes_2012)
summarize(
filter(
filter(all.drinking.rate, state != location),
state != 'National'),
mean = mean(rate))%>%
print()
filter(all.drinking.rate, state != 'National') %>%
group_by(state) %>%
summarize(meana = mean(any_both_sexes_2012), meanb = mean(binge_both_sexes_2012), meanr = mean(rate)) %>%
arrange(meanr) %>%
slice(1) %>%
print()
#this function takes in a name and year and creates a csv file with all of that state and years info
#inputs: name: string the name of the state; year: year that they want to check
#outputs: a csv file that goes into the data folder
ExportStateYear <- function(name, year){
all.drinking.filtered <- filter(all.drinking, state == !!name)
neededColumns <- grepl(toString(year), colnames(all.drinking))
neededColumns[1:2] <- TRUE
important <- select(all.drinking.filtered, which(neededColumns))
placement <- paste('data/', toString(name), year, '.csv', sep = '')
write.csv(important, placement)
}
ExportStateYear('Washington', 2011)
ExportStateYear('Alabama', 2012)
#this fuction outputs the county that has the highest percent of binge drinking by the percent for the
#state in x year
#inputs: name: string the name of the state; year: year that they want to check
#outputs: data frame that state, location and binge drinking percent for both sexes.
MostBingeDrinkingCounty <- function(name, year){
all.drinking.filter <- filter(
filter(all.drinking, state == !!name),
state != location)
neededColumns <- grepl(paste('binge_both_sexes', year, sep = "_"), colnames(all.drinking))
neededColumns[1:2] <- TRUE
important <- select(all.drinking.filter, which(neededColumns))
important <- important[order(-important[ ,3]), ] %>%
slice(1)
return(important)
}
print(MostBingeDrinkingCounty('Washington', 2006))
print(MostBingeDrinkingCounty('New York', 2007))
#################
#### PART 1 #####
#################
library("dplyr")
#this part out puts information on amounts of drinking within the states and the counties.
anyDrinking <- read.csv('data/any_drinking.csv', stringsAsFactors = FALSE)
anyDrinking.info <- select(anyDrinking, state, location, both_sexes_2012, females_2012, males_2012)
anyDrinking.info <- mutate(anyDrinking.info, difference_2012 = males_2012 - females_2012)
View(anyDrinking)
library("dplyr")
library("httr")
library("jsonlite")
source("APIKeys.R")
library(Quandl)
codes <- c("2254","1842", "235", "466", "1434", "113", "2556","362","706", "2414", "441","1152",
"406","465","437", "793","11","176","687","1862", "453","2533","523","685","908"
,"1033","52","984","331","1056","62", "100", "654", "175", "1143", "537", "209", "1571", "179")
install.packages('Quandl')
library("dplyr")
library("httr")
library("jsonlite")
source("APIKeys.R")
library(Quandl)
setwd("~/Documents/University of Washington/Info/201/info201final")
library("dplyr")
library("httr")
library("jsonlite")
source("APIKeys.R")
library(Quandl)
library('Quandl')
install.packages('xts')
library('Quandl')
library('Quandl')
icodes <- c("2254","1842", "235", "466", "1434", "113", "2556","362","706", "2414", "441","1152",
"406","465","437", "793","11","176","687","1862", "453","2533","523","685","908"
,"1033","52","984","331","1056","62", "100", "654", "175", "1143", "537", "209", "1571", "179")
binge.drinking <- read.csv("data/binge_drinking.csv")
binge.WA <- filter(binge.drinking, state == "Washington")
binge.WA <- filter(binge.WA, location != "Washington")
binge.WA$code <- codes
View(binge.WA)
##retrieves data for the first area code and puts into result
Quandl.api_key(quandl.key)
x <- Quandl("ZILLOW/CO100_PRRAH")
View(x)
result <- Quandl("ZILLOW/CO2254_PRRAH")
View(result)
name <- filter(binge.WA, code == "2254")[1,2]
name <- droplevels(name)
name <- as.character(name)
print(name)
colnames(result)[which(names(result) == "Value")] <- name
icodes <- c("00001","1842", "235", "466", "1434", "113", "2556","362","706", "2414", "441","1152",
"406","465","437", "793","11","176","687","1862", "453","2533","523","685","908"
,"1033","52","984","331","1056","62", "100", "654", "175", "1143", "537", "209", "1571", "179")
result2 <- Quandl(paste0("ZILLOW/CO",codes[1],"_PRRAH"))
name <- filter(binge.WA, code == codes[1])[1,2]
name <- as.character(droplevels(name))
colnames(result2)[2] <- name
icodes <- c("00001","1842", "235", "466", "1434", "113", "2556","362","706", "2414", "441","1152",
"406","465","437", "793","11","176","687","1862", "453","2533","523","685","908"
,"1033","52","984","331","1056","62", "100", "654", "175", "1143", "537", "209", "1571", "179")
binge.drinking <- read.csv("data/binge_drinking.csv")
binge.WA <- filter(binge.drinking, state == "Washington")
binge.WA <- filter(binge.WA, location != "Washington")
binge.WA$code <- codes
result2 <- Quandl(paste0("ZILLOW/CO",codes[1],"_PRRAH"))
name <- filter(binge.WA, code == codes[1])[1,2]
name <- as.character(droplevels(name))
##retrieves data for the first area code and puts into result
Quandl.api_key(quandl.key)
x <- Quandl("ZILLOW/CO100_PRRAH")
result <- Quandl("ZILLOW/CO00001_PRRAH")
# Install and load `ggplot2` and `dplyr`
library('ggplot2')
library('dplyr')
# Also install and load the `maps` package, which contains geometry for a number
# of pre-defined maps.
library('maps')
library(rworldmap)
library(ggplot2)
map.world <- map_data(map="world")
# Use `map_data()` to load the `county` map of the US, storing it in a variable
# `counties.map`
iso3 <- mutate(map.world, iso = iso.alpha(map.world$region, n = 3))
# Draw a plot of the `counties.map` data set using polygon geometry.
# Map the the `x` aesthetic to longitude, `y` to latitude, and `group` to "group"
# You can add the `coord_quick_map()` coordinate system to make it look nice
ggplot(data = iso3) +
geom_polygon(aes(x = long, y = lat, group = group)) +
coord_quickmap()
# Read in the provided election data file (.csv)
# BE SURE TO SET YOUR WORKING DIRECTORY!
election <- read.csv('data/2016_US_County_Level_Presidential_Results.csv', stringsAsFactors = FALSE)
# Inspect the `election` data frame to understand the data you're working with
colnames(election)
View(election)
# Use `data()` to load the `"county.fips"` data frame from the `maps` library
data("county.fips")
# Inspect the `county.fips` data frame to see what you got
View(county.fips)
# Use a `join` operation to add `fips` column from `county.fips` to your
# `counties.map` data frame.
# Note that you may need to use `paste0()` and `mutate() to make a column of
# "state,county" values to join by!
# Also note: don't worry about Alaska for this exercise.
counties.map <- counties.map %>%
mutate(polyname = paste0(region,",",subregion)) %>%
left_join(county.fips, by = "polyname")
# Now you can join the `counties.map` data (with fips!) to the `election` data
# Hint: use `by = c("fips" = "combined_fips")` to specify the column to join by
county.elections <- left_join(counties.map, election, by = c("fips" = "combined_fips"))
# One more change: add a column to store whether the Democrat or the Republication
# party had the higher number of votes ("won" the county)
# Hint: start by adding a column of logical values (TRUE/FALSE) of whether a party
#       won, and then join that with a simple data frame that matches to Strings
county.elections <- mutate(county.elections, winner = votes_dem > votes_gop)
dem.won <- data.frame(winner = c(T,F), party = c("Democrat", "Republican"))
county.elections <- left_join(county.elections, dem.won, by = "winner")
# Finally, you can create the election results map!
# Draw a map of the full elections data set, using polygon geometry as above.
# Be sure and `fill` each geometry based on which party won the county
# Specify a `manual` fill scale to make Democratic counties "blue" and Republican
# counties "red"
ggplot(data = county.elections) +
geom_polygon(aes(x = long, y = lat, group = group, fill = party)) +
scale_fill_manual(values = c("blue", "red")) +
coord_quickmap()
# France and all its overseas departments, territories etc.
sov.expand("France") # France and all its overseas departments, territories etc.
# Canary Islands are not included in map("Spain")
iso.expand("ES")
map(regions=sov.expand("Spain"))
# draw a map with ISO codes as labels:
wm <- map("world",fill=TRUE,col=0,xlim=c(-10,40),ylim=c(30,60))
# take out islands, but you loose e.g. UK, New Zealand, small island states
nam <- grep(":",wm$names,inv=TRUE,val=TRUE)
# ad ISO codes as label
map.text(wm,regions=nam,label=iso.alpha(nam),col=2,exact=TRUE)
library("dplyr")
library("httr")
library("jsonlite")
source("APIKeys.R")
library(Quandl)
codes <- c("2254","1842", "235", "466", "1434", "113", "2556","362","706", "2414", "441","1152",
"406","465","437", "793","11","176","687","1862", "453","2533","523","685","908"
,"1033","52","984","331","1056","62", "100", "654", "175", "1143", "537", "209", "1571", "179")
binge.drinking <- read.csv("data/binge_drinking.csv")
binge.WA <- filter(binge.drinking, state == "Washington")
binge.WA <- filter(binge.WA, location != "Washington")
binge.WA$code <- codes
##indicator code : Price to Rent Ratio (PRRAH)
##retrieves data for the first area code and puts into result
Quandl.api_key(quandl.key)
x <- Quandl("ZILLOW/CO100_PRRAH")
result <- Quandl("ZILLOW/CO2254_PRRAH")
name <- filter(binge.WA, code == "2254")[1,2]
name <- droplevels(name)
name <- as.character(name)
print(name)
colnames(result)[which(names(result) == "Value")] <- name
##attempt to loop through codes vector and left_join each result2 to result
for(i in 2:6)
{
result2 <- Quandl(paste0("ZILLOW/CO",codes[i],"_PRRAH"))
name <- filter(binge.WA, code == codes[i])[1,2]
name <- as.character(droplevels(name))
colnames(result2)[2] <- name
result <- left_join(result, result2, by = "Date")
Sys.sleep(0.05)
}
result2 <- Quandl(paste0("ZILLOW/CO",codes[8],"_PRRAH"))
name <- filter(binge.WA, code == codes[8])[1,2]
name <- as.character(droplevels(name))
colnames(result2)[2] <- name
result <- left_join(result, result2, by = "Date")
result2 <- Quandl(paste0("ZILLOW/CO",codes[9],"_PRRAH"))
name <- filter(binge.WA, code == codes[9])[1,2]
name <- as.character(droplevels(name))
colnames(result2)[2] <- name
result <- left_join(result, result2, by = "Date")
# result2 <- Quandl(paste0("ZILLOW/CO",codes[10],"_PRRAH"))
# name <- filter(binge.WA, code == codes[10])[1,2]
# name <- as.character(droplevels(name))
# colnames(result2)[2] <- name
# result <- left_join(result, result2, by = "Date")
result2 <- Quandl(paste0("ZILLOW/CO",codes[11],"_PRRAH"))
name <- filter(binge.WA, code == codes[11])[1,2]
name <- as.character(droplevels(name))
colnames(result2)[2] <- name
result <- left_join(result, result2, by = "Date")
# result2 <- Quandl(paste0("ZILLOW/CO",codes[12],"_PRRAH"))
# name <- filter(binge.WA, code == codes[12])[1,2]
# name <- as.character(droplevels(name))
# colnames(result2)[2] <- name
# result <- left_join(result, result2, by = "Date")
result2 <- Quandl(paste0("ZILLOW/CO",codes[13],"_PRRAH"))
name <- filter(binge.WA, code == codes[13])[1,2]
name <- as.character(droplevels(name))
colnames(result2)[2] <- name
result <- left_join(result, result2, by = "Date")
result2 <- Quandl(paste0("ZILLOW/CO",codes[14],"_PRRAH"))
name <- filter(binge.WA, code == codes[14])[1,2]
name <- as.character(droplevels(name))
colnames(result2)[2] <- name
result <- left_join(result, result2, by = "Date")
result2 <- Quandl(paste0("ZILLOW/CO",codes[15],"_PRRAH"))
name <- filter(binge.WA, code == codes[15])[1,2]
name <- as.character(droplevels(name))
colnames(result2)[2] <- name
result <- left_join(result, result2, by = "Date")
result2 <- Quandl(paste0("ZILLOW/CO",codes[16],"_PRRAH"))
name <- filter(binge.WA, code == codes[16])[1,2]
name <- as.character(droplevels(name))
colnames(result2)[2] <- name
result <- left_join(result, result2, by = "Date")
result2 <- Quandl(paste0("ZILLOW/CO",codes[17],"_PRRAH"))
name <- filter(binge.WA, code == codes[17])[1,2]
name <- as.character(droplevels(name))
colnames(result2)[2] <- name
result <- left_join(result, result2, by = "Date")
result2 <- Quandl(paste0("ZILLOW/CO",codes[18],"_PRRAH"))
name <- filter(binge.WA, code == codes[18])[1,2]
name <- as.character(droplevels(name))
colnames(result2)[2] <- name
result <- left_join(result, result2, by = "Date")
result2 <- Quandl(paste0("ZILLOW/CO",codes[19],"_PRRAH"))
name <- filter(binge.WA, code == codes[19])[1,2]
name <- as.character(droplevels(name))
colnames(result2)[2] <- name
result <- left_join(result, result2, by = "Date")
# result2 <- Quandl(paste0("ZILLOW/CO",codes[20],"_PRRAH"))
# name <- filter(binge.WA, code == codes[20])[1,2]
# name <- as.character(droplevels(name))
# colnames(result2)[2] <- name
# result <- left_join(result, result2, by = "Date")
result2 <- Quandl(paste0("ZILLOW/CO",codes[21],"_PRRAH"))
name <- filter(binge.WA, code == codes[21])[1,2]
name <- as.character(droplevels(name))
colnames(result2)[2] <- name
result <- left_join(result, result2, by = "Date")
# result2 <- Quandl(paste0("ZILLOW/CO",codes[22],"_PRRAH"))
# name <- filter(binge.WA, code == codes[22])[1,2]
# name <- as.character(droplevels(name))
# colnames(result2)[2] <- name
# result <- left_join(result, result2, by = "Date")
result2 <- Quandl(paste0("ZILLOW/CO",codes[23],"_PRRAH"))
name <- filter(binge.WA, code == codes[23])[1,2]
name <- as.character(droplevels(name))
colnames(result2)[2] <- name
result <- left_join(result, result2, by = "Date")
result2 <- Quandl(paste0("ZILLOW/CO",codes[24],"_PRRAH"))
name <- filter(binge.WA, code == codes[24])[1,2]
name <- as.character(droplevels(name))
colnames(result2)[2] <- name
result <- left_join(result, result2, by = "Date")
# result2 <- Quandl(paste0("ZILLOW/CO",codes[25],"_PRRAH"))
# name <- filter(binge.WA, code == codes[25])[1,2]
# name <- as.character(droplevels(name))
# colnames(result2)[2] <- name
# result <- left_join(result, result2, by = "Date")
#
# result2 <- Quandl(paste0("ZILLOW/CO",codes[26],"_PRRAH"))
# name <- filter(binge.WA, code == codes[26])[1,2]
# name <- as.character(droplevels(name))
# colnames(result2)[2] <- name
# result <- left_join(result, result2, by = "Date")
result2 <- Quandl(paste0("ZILLOW/CO",codes[27],"_PRRAH"))
name <- filter(binge.WA, code == codes[27])[1,2]
name <- as.character(droplevels(name))
colnames(result2)[2] <- name
result <- left_join(result, result2, by = "Date")
result2 <- Quandl(paste0("ZILLOW/CO",codes[28],"_PRRAH"))
name <- filter(binge.WA, code == codes[28])[1,2]
name <- as.character(droplevels(name))
colnames(result2)[2] <- name
result <- left_join(result, result2, by = "Date")
result2 <- Quandl(paste0("ZILLOW/CO",codes[29],"_PRRAH"))
name <- filter(binge.WA, code == codes[29])[1,2]
name <- as.character(droplevels(name))
colnames(result2)[2] <- name
result <- left_join(result, result2, by = "Date")
result2 <- Quandl(paste0("ZILLOW/CO",codes[30],"_PRRAH"))
name <- filter(binge.WA, code == codes[30])[1,2]
name <- as.character(droplevels(name))
colnames(result2)[2] <- name
result <- left_join(result, result2, by = "Date")
result2 <- Quandl(paste0("ZILLOW/CO",codes[31],"_PRRAH"))
name <- filter(binge.WA, code == codes[31])[1,2]
name <- as.character(droplevels(name))
colnames(result2)[2] <- name
result <- left_join(result, result2, by = "Date")
result2 <- Quandl(paste0("ZILLOW/CO",codes[32],"_PRRAH"))
name <- filter(binge.WA, code == codes[32])[1,2]
name <- as.character(droplevels(name))
colnames(result2)[2] <- name
result <- left_join(result, result2, by = "Date")
result2 <- Quandl(paste0("ZILLOW/CO",codes[33],"_PRRAH"))
name <- filter(binge.WA, code == codes[33])[1,2]
name <- as.character(droplevels(name))
colnames(result2)[2] <- name
result <- left_join(result, result2, by = "Date")
result2 <- Quandl(paste0("ZILLOW/CO",codes[34],"_PRRAH"))
name <- filter(binge.WA, code == codes[34])[1,2]
name <- as.character(droplevels(name))
colnames(result2)[2] <- name
result <- left_join(result, result2, by = "Date")
# result2 <- Quandl(paste0("ZILLOW/CO",codes[35],"_PRRAH"))
# name <- filter(binge.WA, code == codes[35])[1,2]
# name <- as.character(droplevels(name))
# colnames(result2)[2] <- name
# result <- left_join(result, result2, by = "Date")
result2 <- Quandl(paste0("ZILLOW/CO",codes[36],"_PRRAH"))
name <- filter(binge.WA, code == codes[36])[1,2]
name <- as.character(droplevels(name))
colnames(result2)[2] <- name
result <- left_join(result, result2, by = "Date")
result2 <- Quandl(paste0("ZILLOW/CO",codes[37],"_PRRAH"))
name <- filter(binge.WA, code == codes[37])[1,2]
name <- as.character(droplevels(name))
colnames(result2)[2] <- name
result <- left_join(result, result2, by = "Date")
# result2 <- Quandl(paste0("ZILLOW/CO",codes[38],"_PRRAH"))
# name <- filter(binge.WA, code == codes[38])[1,2]
# name <- as.character(droplevels(name))
# colnames(result2)[2] <- name
# result <- left_join(result, result2, by = "Date")
result2 <- Quandl(paste0("ZILLOW/CO",codes[39],"_PRRAH"))
name <- filter(binge.WA, code == codes[39])[1,2]
name <- as.character(droplevels(name))
colnames(result2)[2] <- name
result <- left_join(result, result2, by = "Date")
View(result2)
View(result)
View(binge.drinking)
