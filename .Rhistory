#function takes a name, age, and birthdate
#returns character string stating days till person's next birthdate, and new age
MakeBirthdayIntro<-function(name, age, birth){
birthdate<-as.Date(birth, "%m/%d/%Y")
result<-paste(MakeIntroduction(name, age), "In",difftime(birthdate, today, unit = "days"), "days I'll be", age+1)
return(result)
}
my.birth.intro<-MakeBirthdayIntro("Olivia", 20, 01/13/1998 )
my.birth.intro<-MakeBirthdayIntro("Olivia", 20, "01/13/1998" )
my.birth.intro<-MakeBirthdayIntro("Olivia", 20, "01/13/2018" )
BirthDate <- as.Date(sub("2018", "2019", birth), "%m/%d/%Y")
return(result)
birth <- sub("2018", "2019", birth)
#function takes a name, age, and birthdate
#returns character string stating days till person's next birthdate, and new age
MakeBirthdayIntro<-function(name, age, birth){
New.Age<- age+1
if(difftime(birth, today) < 0){
birth <- sub("2018", "2019", birth)
result<-paste(MakeIntroduction(name, age), "In",difftime(birth, today, unit = "days"), "days I'll be", NextAge)
}else{
}
}
birth <- sub("2018", "2019", birth)
#function takes a name, age, and birthdate
#returns character string stating days till person's next birthdate, and new age
MakeBirthdayIntro<-function(name, age, birth){
New.Age<- age+1
if(difftime(birth, today) < 0){
NextBirth <- 365 + difftime(birth,today)
result<-paste(MakeIntroduction(name, age), "In",difftime(NextBirth, today, unit = "days"), "days I'll be", NextAge)
return(result)
}else{
}
}
#function takes a name, age, and birthdate
#returns character string stating days till person's next birthdate, and new age
MakeBirthdayIntro<-function(name, age, birth){
New.Age<- age+1
if(difftime(birth, today) < 0){
NextBirth <- 365 + difftime(birth,today)
result<-paste(MakeIntroduction(name, age), "In",difftime(NextBirth, today, unit = "days"), "days I'll be", NextAge)
}else{
result<-result<-paste(MakeIntroduction(name, age), "In",difftime(birth, today, unit = "days"), "days I'll be", NextAge)
}
return(result)
}
#function takes a name, age, and birthdate
#returns character string stating days till person's next birthdate, and new age
MakeBirthdayIntro<-function(name, age, birth){
New.Age<- age+1
if(difftime(birth, today) < 0){
NextBirth <- 365 + difftime(birth,today)
result<-paste(MakeIntroduction(name, age), "In",difftime(NextBirth, today, unit = "days"), "days I'll be", NextAge)
}else{
result<-result<-paste(MakeIntroduction(name, age), "In",difftime(birth, today, unit = "days"), "days I'll be", NextAge)
}
return(result)
}
my.birth.intro<-MakeBirthdayIntro("Olivia", 20, "01/13/2018" )
#function takes a name, age, and birthdate
#returns character string stating days till person's next birthdate, and new age
MakeBirthdayIntro<-function(name, age, birth){
New.Age<- age+1
if(difftime(birth, today) < 0){
NextBirth <- 365 + difftime(birth,today)
result<-paste(MakeIntroduction(name, age), "In",difftime(NextBirth, today, unit = "days"), "days I'll be", New.Age)
}else{
result<-result<-paste(MakeIntroduction(name, age), "In",difftime(birth, today, unit = "days"), "days I'll be", New.Age)
}
return(result)
}
my.birth.intro<-MakeBirthdayIntro("Olivia", 20, "01/13/2018" )
#function takes a name, age, and birthdate
#returns character string stating days till person's next birthdate, and new age
MakeBirthdayIntro<-function(name, age, birth){
New.Age<- age+1
if(difftime(birth, today) < 0){
NextBirth <- 365 + difftime(birth,today)
result<-paste(MakeIntroduction(name, age), "In",difftime(NextBirth, today, tz, unit = "days"), "days I'll be", New.Age)
}else{
result<-result<-paste(MakeIntroduction(name, age), "In",difftime(birth, today,tz, unit = "days"), "days I'll be", New.Age)
}
return(result)
}
my.birth.intro<-MakeBirthdayIntro("Olivia", 20, "01/13/2018" )
result<-paste(MakeIntroduction(name, age), "In",difftime(birth, today,tz, unit = "days"), "days I'll be", New.Age)
#function takes a name, age, and birthdate
#returns character string stating days till person's next birthdate, and new age
MakeBirthdayIntro<-function(name, age, birth){
New.Age<- age+1
if(difftime(birth, today) < 0){
NextBirth <- 365 + difftime(birth,today)
result<-paste(MakeIntroduction(name, age), "In",difftime(NextBirth, today, tz, unit = "days"), "days I'll be", New.Age)
}else{
result<-paste(MakeIntroduction(name, age), "In",difftime(birth, today,tz, unit = "days"), "days I'll be", New.Age)
}
return(result)
}
my.birth.intro<-MakeBirthdayIntro("Olivia", 20, "01/13/2018" )
my.birth.intro<-MakeBirthdayIntro("Olivia", 20, as.Date("01/13/2018", "%m/%d/%Y"))
#function takes a name, age, and birthdate
#returns character string stating days till person's next birthdate, and new age
MakeBirthdayIntro<-function(name, age, birth){
New.Age<- age+1
if(difftime(birth, today) < 0){
NextBirth <- 365 + difftime(birth,today)
result<-paste(MakeIntroduction(name, age), "In",difftime(NextBirth, today, tz, unit = "days"), "days I'll be", New.Age)
}else{
result<-paste(MakeIntroduction(name, age), "In",difftime(birth, today,tz, unit = "days"), "days I'll be", New.Age)
}
return(result)
}
my.birth.intro<-MakeBirthdayIntro("Olivia", 20, as.Date("01/13/2018", "%m/%d/%Y"))
#function takes a name, age, and birthdate
#returns character string stating days till person's next birthdate, and new age
MakeBirthdayIntro<-function(name, age, birth){
New.Age<- age+1
if(difftime(birth, today) < 0){
NextBirth <- as.Date(as.character(sub("2018", "2019",birth)),"%m/%d/%Y")
result<-paste(MakeIntroduction(name, age), "In",difftime(NextBirth, today, tz, unit = "days"), "days I'll be", New.Age)
}else{
result<-paste(MakeIntroduction(name, age), "In",difftime(birth, today,tz, unit = "days"), "days I'll be", New.Age)
}
return(result)
}
my.birth.intro<-MakeBirthdayIntro("Olivia", 20, as.Date("01/13/2018", "%m/%d/%Y"))
#function takes a name, age, and birthdate
#returns character string stating days till person's next birthdate, and new age
MakeBirthdayIntro<-function(name, age, birth){
New.Age<- age+1
differencce<- difftime(birth,today)
if(difference < 0){
NextBirth <- 365 + as.numeric(difference)
result<-paste(MakeIntroduction(name, age), "In",difftime(NextBirth, today, tz, unit = "days"), "days I'll be", New.Age)
}else{
result<-paste(MakeIntroduction(name, age), "In",difftime(birth, today,tz, unit = "days"), "days I'll be", New.Age)
}
return(result)
}
my.birth.intro<-MakeBirthdayIntro("Olivia", 20, as.Date("01/13/2018", "%m/%d/%Y"))
differencce<- difftime(birth,today)
#function takes a name, age, and birthdate
#returns character string stating days till person's next birthdate, and new age
MakeBirthdayIntro<-function(name, age, birth){
New.Age<- age+1
differencce<- difftime(birth,today)
if(difference < 0){
NextBirth <- 365 + as.numeric(difference)
result<-paste(MakeIntroduction(name, age), "In",difftime(NextBirth, today, tz, unit = "days"), "days I'll be", New.Age)
}else{
result<-paste(MakeIntroduction(name, age), "In",difftime(birth, today,tz, unit = "days"), "days I'll be", New.Age)
}
return(result)
}
difference<- difftime(birth,today)
#function takes a name, age, and birthdate
#returns character string stating days till person's next birthdate, and new age
MakeBirthdayIntro<-function(name, age, birth){
New.Age<- age+1
difference<- difftime(birth,today)
if(difference < 0){
NextBirth <- 365 + as.numeric(difference)
result<-paste(MakeIntroduction(name, age), "In",difftime(NextBirth, today, tz, unit = "days"), "days I'll be", New.Age)
}else{
result<-paste(MakeIntroduction(name, age), "In",difftime(birth, today,tz, unit = "days"), "days I'll be", New.Age)
}
return(result)
}
my.birth.intro<-MakeBirthdayIntro("Olivia", 20, as.Date("01/13/2018", "%m/%d/%Y"))
#function takes a name, age, and birthdate
#returns character string stating days till person's next birthdate, and new age
MakeBirthdayIntro<-function(name, age, birth){
New.Age<- age+1
difference<- difftime(birth,today)
if(difference < 0){
NextBirth <- 365 + as.numeric(difference,unit= "days")
result<-paste(MakeIntroduction(name, age), "In",difftime(NextBirth, today, tz, unit = "days"), "days I'll be", New.Age)
}else{
result<-paste(MakeIntroduction(name, age), "In",difftime(birth, today,tz, unit = "days"), "days I'll be", New.Age)
}
return(result)
}
my.birth.intro<-MakeBirthdayIntro("Olivia", 20, as.Date("01/13/2018", "%m/%d/%Y"))
#function takes a name, age, and birthdate
#returns character string stating days till person's next birthdate, and new age
install(lubridicate)
#function takes a name, age, and birthdate
#returns character string stating days till person's next birthdate, and new age
install("lubridicate")
#function takes a name, age, and birthdate
#returns character string stating days till person's next birthdate, and new age
install.packages("lubridicate")
#function takes a name, age, and birthdate
#returns character string stating days till person's next birthdate, and new age
library(lubridicate)
#function takes a name, age, and birthdate
#returns character string stating days till person's next birthdate, and new age
install.packages(lubridate)
#function takes a name, age, and birthdate
#returns character string stating days till person's next birthdate, and new age
install.packages("lubridate")
library("lubridate")
year(birth)<-2019
MakeBirthdayIntro<-function(name, age, birth){
New.Age<- age+1
difference<- difftime(birth,today)
if(difference < 0){
year(birth)<-2019
result<-paste(MakeIntroduction(name, age), "In",difftime(NextBirth, today, tz, unit = "days"), "days I'll be", New.Age)
}else{
result<-paste(MakeIntroduction(name, age), "In",difftime(birth, today,tz, unit = "days"), "days I'll be", New.Age)
}
return(result)
}
MakeBirthdayIntro<-function(name, age, birth){
New.Age<- age+1
difference<- difftime(birth,today)
if(difference < 0){
year(birth)<-2019
}
result<-paste(MakeIntroduction(name, age), "In",difftime(birth, today,tz, unit = "days"), "days I'll be", New.Age)
return(result)
}
my.birth.intro<-MakeBirthdayIntro("Olivia", 20, as.Date("01/13/2018", "%m/%d/%Y"))
print(my.birth.intro)
census.api <- "bf7f16125e5736a692fa2e937196e595176b58c6"
install.packages("Shiny")
install.packages("shiny")
rsconnect::setAccountInfo(name='tango222',
token='3F06EE73739F3C1D3D030EA2050B3F11',
secret='<SECRET>')
install.packages('rsconnect')
rsconnect::setAccountInfo(name='tango222',
token='3F06EE73739F3C1D3D030EA2050B3F11',
secret='<SECRET>')
rsconnect::setAccountInfo(name='tango222',
token='3F06EE73739F3C1D3D030EA2050B3F11',
secret='<SECRET>')
rsconnect::setAccountInfo(name='tango222',
token='3F06EE73739F3C1D3D030EA2050B3F11',
secret='1E02FaAqVqtIbJdXgMmET+a+0n4OLLFt0WsGwTl+')
rsconnect::setAccountInfo(name='tango222',
token='3F06EE73739F3C1D3D030EA2050B3F11',
secret='1E02FaAqVqtIbJdXgMmET+a+0n4OLLFt0WsGwTl+')
library('shiny')
library('shiny')
install.packages("ggplot2")
library('ggplot2')
library("dplyr")
install.packages("tidyr")
library("tidyr")
install.packages("tidyr")
install.packages("tidyr")
library("dplyr")
library("httr")
library("jsonlite")
source("APIKeys.R")
library(Quandl)
codes <- c("2254","1842", "235", "466", "1434", "113", "2556","362","706", "2414", "441","1152",
"406","465","437", "793","11","176","687","1862", "453","2533","523","685","908"
,"1033","52","984","331","1056","62", "100", "654", "175", "1143", "537", "209", "1571", "179")
binge.drinking <- read.csv("data/binge_drinking.csv")
setwd("C:/Users/Olivia/Desktop/INFO201/info201final")
codes <- c("2254","1842", "235", "466", "1434", "113", "2556","362","706", "2414", "441","1152",
"406","465","437", "793","11","176","687","1862", "453","2533","523","685","908"
,"1033","52","984","331","1056","62", "100", "654", "175", "1143", "537", "209", "1571", "179")
binge.drinking <- read.csv("data/binge_drinking.csv")
binge.WA <- filter(binge.drinking, state == "Washington")
binge.WA <- filter(binge.WA, location != "Washington")
binge.WA$code <- codes
##retrieves data for the first area code and puts into result
Quandl.api_key(quandl.key)
Quandl(paste0("ZILLow/CO"))
codes <- c("2254","1842", "235", "466", "1434", "113", "2556","362","706", "2414", "441","1152",
"406","465","437", "793","11","176","687","1862", "453","2533","523","685","908"
,"1033","52","984","331","1056","62", "100", "654", "175", "1143", "537", "209", "1571", "179")
##retrieves data for the first area code and puts into result
Quandl.api_key(quandl.key)
setwd("C:/Users/Olivia/Desktop/INFO201/info201final")
library("dplyr")
library("httr")
library("jsonlite")
source("APIKeys.R")
library(Quandl)
codes <- c("2254","1842", "235", "466", "1434", "113", "2556","362","706", "2414", "441","1152",
"406","465","437", "793","11","176","687","1862", "453","2533","523","685","908"
,"1033","52","984","331","1056","62", "100", "654", "175", "1143", "537", "209", "1571", "179")
binge.drinking <- read.csv("data/binge_drinking.csv")
binge.WA <- filter(binge.drinking, state == "Washington")
binge.WA <- filter(binge.WA, location != "Washington")
binge.WA$code <- codes
##retrieves data for the first area code and puts into result
Quandl.api_key(quandl.key)
Quandl(paste0("ZILLow/CO"))
x <- Quandl("ZILLOW/CO100_PRRAH")
Quandl(paste0("ZILLow/CO"))
x <- Quandl("ZILLOW/CO100_PRRAH")
result <- Quandl("ZILLOW/CO2254_PRRAH")
name <- filter(binge.WA, code == "2254")[1,2]
name <- droplevels(name)
name <- as.character(name)
print(name)
colnames(result)[which(names(result) == "Value")] <- name
##attempt to loop through codes vector and left_join each result2 to result
for(i in 2:6)
{
result2 <- Quandl(paste0("ZILLOW/CO",codes[i],"_PRRAH"))
name <- filter(binge.WA, code == codes[i])[1,2]
name <- as.character(droplevels(name))
colnames(result2)[2] <- name
result <- left_join(result, result2, by = "Date")
Sys.sleep(0.05)
}
pull <- function(index){
result2 <- Quandl(paste0("ZILLOW/CO",codes[index],"_PRRAH"))
name <- filter(binge.WA, code == codes[index])[1,2]
name <- as.character(droplevels(name))
colnames(result2)[2] <- name
result <- left_join(result, result2, by = "Date")
Sys.sleep(0.05)
}
pull(8)
result2 <- Quandl(paste0("ZILLOW/CO",codes[8],"_PRRAH"))
name <- filter(binge.WA, code == codes[8])[1,2]
name <- as.character(droplevels(name))
colnames(result2)[2] <- name
result <- left_join(result, result2, by = "Date")
pull <- function(index){
result2 <- Quandl(paste0("ZILLOW/CO",codes[index],"_PRRAH"))
name <- filter(binge.WA, code == codes[index])[1,2]
name <- as.character(droplevels(name))
colnames(result2)[2] <- name
}
pull(8)
View(result2)
View(result2)
rm(result2)
pull <- function(index){
result2 <- Quandl(paste0("ZILLOW/CO",codes[index],"_PRRAH"))
name <- filter(binge.WA, code == codes[index])[1,2]
name <- as.character(droplevels(name))
colnames(result2)[2] <- name
}
pull(8)
result2 <- Quandl(paste0("ZILLOW/CO",codes[9],"_PRRAH"))
name <- filter(binge.WA, code == codes[9])[1,2]
name <- as.character(droplevels(name))
colnames(result2)[2] <- name
result <- left_join(result, result2, by = "Date")
result2 <- Quandl(paste0("ZILLOW/CO",codes[10],"_PRRAH"))
name <- filter(binge.WA, code == codes[10])[1,2]
result2 <- Quandl(paste0("ZILLOW/CO",codes[11],"_PRRAH"))
name <- filter(binge.WA, code == codes[11])[1,2]
name <- as.character(droplevels(name))
colnames(result2)[2] <- name
result <- left_join(result, result2, by = "Date")
result2 <- Quandl(paste0("ZILLOW/CO",codes[12],"_PRRAH"))
name <- filter(binge.WA, code == codes[12])[1,2]
result2 <- Quandl(paste0("ZILLOW/CO",codes[13],"_PRRAH"))
name <- filter(binge.WA, code == codes[13])[1,2]
name <- as.character(droplevels(name))
colnames(result2)[2] <- name
result <- left_join(result, result2, by = "Date")
result2 <- Quandl(paste0("ZILLOW/CO",codes[14],"_PRRAH"))
name <- filter(binge.WA, code == codes[14])[1,2]
name <- as.character(droplevels(name))
colnames(result2)[2] <- name
result <- left_join(result, result2, by = "Date")
result2 <- Quandl(paste0("ZILLOW/CO",codes[15],"_PRRAH"))
name <- filter(binge.WA, code == codes[15])[1,2]
name <- as.character(droplevels(name))
colnames(result2)[2] <- name
result <- left_join(result, result2, by = "Date")
result2 <- Quandl(paste0("ZILLOW/CO",codes[16],"_PRRAH"))
name <- filter(binge.WA, code == codes[16])[1,2]
name <- as.character(droplevels(name))
colnames(result2)[2] <- name
result <- left_join(result, result2, by = "Date")
result2 <- Quandl(paste0("ZILLOW/CO",codes[17],"_PRRAH"))
name <- filter(binge.WA, code == codes[17])[1,2]
name <- as.character(droplevels(name))
colnames(result2)[2] <- name
result <- left_join(result, result2, by = "Date")
result2 <- Quandl(paste0("ZILLOW/CO",codes[18],"_PRRAH"))
name <- filter(binge.WA, code == codes[18])[1,2]
name <- as.character(droplevels(name))
colnames(result2)[2] <- name
result <- left_join(result, result2, by = "Date")
result2 <- Quandl(paste0("ZILLOW/CO",codes[19],"_PRRAH"))
name <- filter(binge.WA, code == codes[19])[1,2]
name <- as.character(droplevels(name))
colnames(result2)[2] <- name
result <- left_join(result, result2, by = "Date")
result2 <- Quandl(paste0("ZILLOW/CO",codes[20],"_PRRAH"))
name <- filter(binge.WA, code == codes[20])[1,2]
result2 <- Quandl(paste0("ZILLOW/CO",codes[21],"_PRRAH"))
name <- filter(binge.WA, code == codes[21])[1,2]
name <- as.character(droplevels(name))
colnames(result2)[2] <- name
result <- left_join(result, result2, by = "Date")
result2 <- Quandl(paste0("ZILLOW/CO",codes[22],"_PRRAH"))
name <- filter(binge.WA, code == codes[22])[1,2]
name <- as.character(droplevels(name))
result2 <- Quandl(paste0("ZILLOW/CO",codes[23],"_PRRAH"))
name <- filter(binge.WA, code == codes[23])[1,2]
name <- as.character(droplevels(name))
colnames(result2)[2] <- name
result <- left_join(result, result2, by = "Date")
result2 <- Quandl(paste0("ZILLOW/CO",codes[24],"_PRRAH"))
name <- filter(binge.WA, code == codes[24])[1,2]
name <- as.character(droplevels(name))
colnames(result2)[2] <- name
result <- left_join(result, result2, by = "Date")
result2 <- Quandl(paste0("ZILLOW/CO",codes[25],"_PRRAH"))
result2 <- Quandl(paste0("ZILLOW/CO",codes[26],"_PRRAH"))
name <- filter(binge.WA, code == codes[26])[1,2]
result2 <- Quandl(paste0("ZILLOW/CO",codes[27],"_PRRAH"))
name <- filter(binge.WA, code == codes[27])[1,2]
name <- as.character(droplevels(name))
colnames(result2)[2] <- name
result <- left_join(result, result2, by = "Date")
result2 <- Quandl(paste0("ZILLOW/CO",codes[28],"_PRRAH"))
name <- filter(binge.WA, code == codes[28])[1,2]
name <- as.character(droplevels(name))
colnames(result2)[2] <- name
result <- left_join(result, result2, by = "Date")
result2 <- Quandl(paste0("ZILLOW/CO",codes[29],"_PRRAH"))
name <- filter(binge.WA, code == codes[29])[1,2]
name <- as.character(droplevels(name))
colnames(result2)[2] <- name
result <- left_join(result, result2, by = "Date")
result2 <- Quandl(paste0("ZILLOW/CO",codes[30],"_PRRAH"))
name <- filter(binge.WA, code == codes[30])[1,2]
name <- as.character(droplevels(name))
colnames(result2)[2] <- name
result <- left_join(result, result2, by = "Date")
result2 <- Quandl(paste0("ZILLOW/CO",codes[31],"_PRRAH"))
name <- filter(binge.WA, code == codes[31])[1,2]
name <- as.character(droplevels(name))
colnames(result2)[2] <- name
result <- left_join(result, result2, by = "Date")
result2 <- Quandl(paste0("ZILLOW/CO",codes[32],"_PRRAH"))
name <- filter(binge.WA, code == codes[32])[1,2]
name <- as.character(droplevels(name))
colnames(result2)[2] <- name
result <- left_join(result, result2, by = "Date")
result2 <- Quandl(paste0("ZILLOW/CO",codes[33],"_PRRAH"))
name <- filter(binge.WA, code == codes[33])[1,2]
name <- as.character(droplevels(name))
colnames(result2)[2] <- name
result <- left_join(result, result2, by = "Date")
result2 <- Quandl(paste0("ZILLOW/CO",codes[34],"_PRRAH"))
name <- filter(binge.WA, code == codes[34])[1,2]
name <- as.character(droplevels(name))
colnames(result2)[2] <- name
result <- left_join(result, result2, by = "Date")
result2 <- Quandl(paste0("ZILLOW/CO",codes[35],"_PRRAH"))
name <- filter(binge.WA, code == codes[35])[1,2]
result2 <- Quandl(paste0("ZILLOW/CO",codes[36],"_PRRAH"))
name <- filter(binge.WA, code == codes[36])[1,2]
name <- as.character(droplevels(name))
colnames(result2)[2] <- name
result <- left_join(result, result2, by = "Date")
result2 <- Quandl(paste0("ZILLOW/CO",codes[37],"_PRRAH"))
name <- filter(binge.WA, code == codes[37])[1,2]
name <- as.character(droplevels(name))
colnames(result2)[2] <- name
result <- left_join(result, result2, by = "Date")
result2 <- Quandl(paste0("ZILLOW/CO",codes[38],"_PRRAH"))
name <- filter(binge.WA, code == codes[38])[1,2]
result2 <- Quandl(paste0("ZILLOW/CO",codes[39],"_PRRAH"))
name <- filter(binge.WA, code == codes[39])[1,2]
name <- as.character(droplevels(name))
colnames(result2)[2] <- name
result <- left_join(result, result2, by = "Date")
binge.drinking <- read.csv("data/mort.csv")
setwd("C:/Users/Olivia/Desktop/INFO201/info201final")
binge.drinking <- read.csv("data/mort.csv")
binge.drinking <- read.csv("data/mort.csv")
setwd("C:/Users/Olivia/Desktop/INFO201/a7-data-app-tango222")
emissions.country <- read.csv('data/WDI_emissions_Data.csv')
##renames first column without the weird character
colnames(emissions.country)[which(names(emissions.country) == "Ã¯..Country.Code")] <- "Country.Code"
##drops levels
emissions <- droplevels(emissions.country)
##filters data to just two Series.Codes
emissions <- filter(emissions.country, grepl('EN.ATM.CO2E.KT|EN.ATM.CO2E.PC', Series.Code))
View(emissions)
View(emissions)
View(binge.drinking)
View(binge.drinking)
View(binge.drinking)
View(binge.drinking)
shiny::runApp()
library('shiny')
library("dplyr")
mort <- read.csv("data/mort.csv")
mort <- read.csv("data/mort.csv")
mort <- read.csv("data/mort.csv")
setwd("C:/Users/Olivia/Desktop/INFO201/info201final")
mort <- read.csv("data/mort.csv")
View(mort)
mort <- filter(mort, FIPS == 1)
categories <- mort$Category
print(categories)
class(categories)
categories <- as.vector(categories)
print(categories)
library('shiny')
library("dplyr")
source("main2.R")
